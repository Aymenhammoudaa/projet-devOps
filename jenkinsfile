pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'springboot-app'
        DOCKER_TAG = 'latest'
        REGISTRY = 'docker.io'
    }

    stages {
        stage('Checkout') {
            steps {
                // Cloner le repository GitHub avec le token
                git credentialsId: 'github-token', branch: 'eya', url: 'https://github.com/Aymenhammoudaa/projet-devOps.git'
            }
        }

        stage('Build') {
            steps {
                script {
                    // Construire l'image Docker pour l'application Spring Boot
                    sh 'mvn clean package -DskipTests'
                    sh 'docker build -t $DOCKER_IMAGE:$DOCKER_TAG .'
                }
            }
        }

        stage('Docker Hub Login') {
            steps {
                script {
                    // Connexion à Docker Hub avec le credential dockerhub-credentials
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        echo "Docker login successful!"
                    }
                }
            }
        }

        stage('Push Image') {
            steps {
                script {
                    // Push de l'image Docker sur Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        sh 'docker push $DOCKER_IMAGE:$DOCKER_TAG'
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Lancer les containers avec Docker Compose
                    sh 'docker-compose -f docker-compose.yml up -d'
                }
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    // Nettoyer les images Docker pour éviter l'accumulation
                    sh 'docker system prune -f'
                }
            }
        }
    }

    post {
        success {
            echo 'La pipeline a réussi !'
        }
        failure {
            echo 'La pipeline a échoué.'
        }
    }
}
